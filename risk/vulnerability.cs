using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MySql.Data;
using MySql.Data.MySqlClient;
using System.Configuration;

namespace risk
{
    public partial class vulnerability : Form
    {
        public vulnerability(string s)
        {
            //将asset的comboBox1.Text通过构造函数传递过来
            InitializeComponent();
            this.label2.Text = s;
        }

        //声明一个16*3的textBox的组件数组
        public TextBox[,] vulnerabilitylist = new TextBox[16, 3];

        //创建释放16*3的textBox组件的函数
        private void AddTextbox(CheckedListBox clb, int temp, TextBox[,] ex)
        {
            for (int j = 0; j < temp; j++)
            {
                for (int i = 0; i < clb.Items.Count; i++)
                {
                    TextBox tb = new TextBox();
                    tb.Size = new Size(100, 21);
                    tb.Enabled = false;
                    tb.Location = new Point(323 + j * 115, 122 + 24 * i);
                    this.Controls.Add(tb);
                    ex[i, j] = tb;
                }
            }
        }

        //当页面读取时，添加textBox数组
        private void vulnerability_Load(object sender, EventArgs e)
        {
            AddTextbox(checkedListBox1, 3, vulnerabilitylist);
        }

        //判定16*3的textBox组件的状态函数
        private void FindtextBox(CheckedListBox cb, TextBox[,] ex, int t)
        {
            for (int i = 0; i < cb.Items.Count; i++)
            {
                if (cb.GetItemChecked(i))
                {
                    for (int j = 0; j < t; j++)
                    {
                        ex[i, j].Enabled = true;
                    }
                }
                else
                {
                    for (int j = 0; j < t; j++)
                    {
                        ex[i, j].Enabled = false;
                        ex[i, j].Text = null;
                    }
                }
            }
        }

        //当checkedlist的check属性发生改变时，判断comboBox组件是否可被操作
        private void checkedListBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            FindtextBox(checkedListBox1, vulnerabilitylist, 3);
        }

        public vulnerability()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string[] asset_name = new string[29];
            string[] vulnerability_name = new string[16];
            string[] cmd = new string[16];
            int[] hr = new int[16];
            int[] mr = new int[16];
            int[] lr = new int[16];
            int[] weight_num = new int[16];
            int[] i_list = new int[16];
            try
            {
                //循环整个checkedlist的状态，通过GetItemChecked属性判断下一步操作
                for (int i = 0; i < checkedListBox1.Items.Count; i++)
                {
                    if (checkedListBox1.GetItemChecked(i))
                    {
                        //获取数据
                        asset_name[i] = label2.Text;
                        vulnerability_name[i] = checkedListBox1.GetItemText(checkedListBox1.Items[i]);
                        lr[i] = Convert.ToInt32(vulnerabilitylist[i, 0].Text);
                        mr[i] = Convert.ToInt32(vulnerabilitylist[i, 1].Text);
                        hr[i] = Convert.ToInt32(vulnerabilitylist[i, 2].Text);
                        weight_num[i] = lr[i] + 2*mr[i] + 3*hr[i];
                        
                        i_list[i] = 1;
                    }
                }
                //连接数据库
                string strcon = ConfigurationManager.ConnectionStrings["strCon"].ConnectionString;
                MySqlConnection conn = new MySqlConnection(strcon);
                conn.Open();
                for (int i = 0; i < checkedListBox1.Items.Count; i++)
                {
                    if (i_list[i] == 1)
                    {
                        cmd[i] = "INSERT INTO vulnerability(assetname,vulnerability_name,low_risk,medium_risk,high_risk,weight_num) VALUES('" + asset_name[i] + "','" + vulnerability_name[i] + "'," + lr[i] + "," + mr[i] + "," + hr[i] + "," + weight_num[i] + ")";
                        MySqlCommand cmda = new MySqlCommand(cmd[i], conn);
                        cmda.ExecuteNonQuery();
                    }
                }
                conn.Close();
            }
            catch
            {
               MessageBox.Show("出现未知错误！");
            }
            finally
            {
                MessageBox.Show("添加数据成功，点击确定回到资产评估。");
            }
            this.Close();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}
